🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳
# Start docker daemon
docker -d

# create project from init
docker init

#build
docker build .
docker build --rm . # delete intermidate containers
docker build --rm -f Dockerfile -t <image_name_given> .

# network
# - bridge
# - host: bindiar puertos
# - overlay: redes virtuales entre contenedores y entre nodos
# - macvlan: asigna direccion mac a un contenedor
# - none: desactiva networking

# Registry


# start a container with an interactive shell
docker run -ti <image_name> /bin/bash
docker run -ti --rm <image_name> /bin/bash     # delete container on exit
docker run -ti --entrypoint=bash <image_name>  # change entrypoint for debug
docker run -ti --name <custom_name> <image_name> # rename container
docker run -ti -p <machine_port>:<container_port> --name <custom_name> <image_name> # open and mapping a port from container

# start a container detached
docker run -d <image_name> /bin/bash

# add files and directories
# –mount and–volume (–v) flags with the same functionality. BUT, the syntax is completely different
docker run -d -it --mount type=bind,source="$(pwd)"/file.txt,target=/file.txt,readonly alpine:latest  # mount file
docker run -d -it -v "$(pwd)"/file.txt:/file.txt:ro  alpine:latest  # mount using volume

# mount .env
docker run -it --rm --env-file ./.env alpine:latest          # mount .env using flag
docker run -it --rm -v "$(pwd)"/.env:/.env:ro alpine:latest  # mount .env using volume, useful for distroless images

# Set CPU affinity (see cheat numbactl)
docker run --cpuset-cpus=0,4,8,12,16,20,24,28 --name test

# set network
docker run -d --network <network_name> --network-alias <network_alias> <image_name>/<tag>

# set stotage
docker run -d -v <local_storage>:<mount_path>:<permission,ro,rw> <image_name>/<tag>

# mount (for services)
docker run -d --mount source=<local_vol>,destination=<destination_path>,readonly <image_name>/<tag>

# "shell" into a running container (docker-1.3+)
docker exec -ti <container_name> bash

# update to update restart policy.
docker update --restart=always <container_id>

# pause / unpause container
docker pause <container_id>
docker unpause <container_id>

# inspect a running container
docker inspect <container_name> (or <container_id>)

# Get the process ID for a container
# Source: https://github.com/jpetazzo/nsenter
docker inspect --format {{.State.Pid}} <container_name_or_ID>

# List the current mounted volumes for a container (and pretty print)
# Source:
# http://nathanleclaire.com/blog/2014/07/12/10-docker-tips-and-tricks-that-will-make-you-sing-a-whale-song-of-joy/
docker inspect --format='{{json .Volumes}}' <container_id> | python -mjson.tool

# Copy files/folders between a container and your host
docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-
docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH

# list currently running containers
docker ps

# list all containers
docker ps -a

# check process of a container
docker top <container_id>

# list all images
docker images

# See stats of containers
docker stats

# see logs of a container
docker logs --tail=10 -t <container_id>  # -t: agrega timestamp

# check events
docker events

# check modifications in the container since run
docker diff <container_id>

# check operation on the container
docker history <container_id>

# remove not used resources
docker system prune

# export File System as tar
docker export <container_name> > <container_name_FileSystem.tar

# list File System (from the tar output)
docker export < container_name> | tar t

# backup a volume from a container (this create a file backup.tar on current folder)
docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata

# restore a volume from another container


# copy a file from a container that is not running
docker cp <container-name>:<path/inside/container> <path/on/host/>

# save/restore image
docker save <container_id> > container_snapshot.tar
docker load < container_snapshot.tar

# search images
docker search -s 5

# add new configuration to a running container
docker update <config> <container_id>
docker update --restart=unless-stopped <container_id>

# show the exit output of a container (useful in script)
docker wait <container_id>

# list networks
docker network ls

# add network to container
docker network connect <id or name of the network> <id or name of the container>

## Dockerfile has their own cheat (cheat dockerfile)

