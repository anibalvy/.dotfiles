# Start docker daemon
docker -d

# start a container with an interactive shell
docker run -ti <image_name> /bin/bash

# "shell" into a running container (docker-1.3+)
docker exec -ti <container_name> bash

# Set CPU affinity (see cheat numbactl)
docker run --cpuset-cpus=0,4,8,12,16,20,24,28 --name test
 
# inspect a running container
docker inspect <container_name> (or <container_id>)

# Get the process ID for a container
# Source: https://github.com/jpetazzo/nsenter
docker inspect --format {{.State.Pid}} <container_name_or_ID>

# List the current mounted volumes for a container (and pretty print)
# Source:
# http://nathanleclaire.com/blog/2014/07/12/10-docker-tips-and-tricks-that-will-make-you-sing-a-whale-song-of-joy/
docker inspect --format='{{json .Volumes}}' <container_id> | python -mjson.tool

# Copy files/folders between a container and your host
docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-
docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH

# list currently running containers
docker ps

# list all containers
docker ps -a

# list all images
docker images

# export File System as tar
docker export <container_name> > <container_name_FileSystem.tar

# list File System (from the tar output)
docker export < container_name> | tar t

# copy a file from a container that is not running
docker cp <container-name>:<path/inside/container> <path/on/host/>

# create a Node app
server.js
```js
var http = require('http');
var handleRequest = function(request, response) {
      console.log('Received request for URL: ' + request.url);
        response.writeHead(200);
          response.end('Hello World!');
};
var www = http.createServer(handleRequest);
www.listen(8080);
```
Dockerfile
```
FROM node:6.14.2
EXPOSE 8080
COPY server.js .
CMD [ "node", "server.js" ]
```
and building it on the same folder:
```sh
docker build .
```

## Create an image and run it with docker-compose
# Folder structure:
.
├── docker-compose.yml
└── Dockerfile

# Content of Dockerfile:

FROM alpine
CMD ["echo", "i am groot"]

# Build and tag image:

docker build -t groot .
docker tag groot:latest groot:staging

# docker-compose.yml:

version: '3.1'
services:
  groot:
    image: groot:staging

# and start docker-compose:

$ docker-compose up
Creating groot_groot ... 
Creating groot_groot_1 ... done
Attaching to groot_groot_1
groot_1  | i am groot
groot_groot_1 exited with code 0

