# ZFS

> WARNING:
>   In order to avoid headaches when moving ZFS physical devices around,
>   one will be much better served to reference devices by their *immutable*
>   ID - as in /dev/disk/by-id/* - rather than their block device name -
>   as in /dev/{sd,nvme}* - which is bound to change as per PCI enumeration
>   order.
> For the sake of briefness, we'll use the following variables:
>   ${device}    device (/dev/disk/by-id/${device})
>   ${part}      partition (/dev/disk/by-id/${part=${device}-part${N}})
>   ${pool}      ZFS pool (name)
>   ${fs_vol}    ZFS file system or volume (name)
>   ${snapshot}  ZFS snapshot (name)


## Pools

- Create a new "RAID-5" (raidz1) pool
 Recommended: use entire devices rather than partitions
```sh
zpool create ${pool} raidz1 ${device} ${device} ${device} [...]
```

- Add 2nd-level "RAID-1" (mirror) ZFS Intent Log (ZIL; synchronous write cache)
 Recommended: use separate, fast, low-latency devices (e.g. NVMe)
```sh
zpool add ${pool} log mirror ${part} ${part}
```

- Add 2nd-level "RAID-0" Adaptive Replacement Cache (ARC; read cache)
 Recommended: use separate, fast, low-latency devices (e.g. NVMe)
```sh
zpool add ${pool} cache ${part} ${part} [...]
```

- Remove log or cache components
```sh
zpool remove zfs ${part} [...]
```

- Import (enable) existing pool from newly connected devices
  Note: this will create the /etc/zfs/zpool.cache devices cache
```sh
zpool import -d /dev/disk/by-id -aN
```

- Import (enable) existing pool using the devices cache
```sh
zpool import -c /etc/zfs/zpool.cache -aN
```

- Export (disable) pool (e.g. before shutdown)
```sh
zpool export -a
```

- List all (imported) pools
```sh
zpool list
```

- See pool status
```sh
zpool status ${pool}
```

- See detailed pool I/O statistics
```sh
zpool iostat ${pool} -v
```

- Verify pool integrity (data checksums)
  (watch progress with 'zpool status')
```sh
zpool scrub ${pool}
```

- Remove a failing device from a pool
  Note: redundant pools (mirror, raidz) will continue working in degraded state
```sh
zpool detach ${pool} ${device}
```

- Replace a failed device in a pool
  Note: new device will be "resilvered" automatically (parity reconstruction)
       (watch progress with 'zpool status')
```sh
zpool replace ${pool} ${failed-device} ${new-device}
```

- Erase zpool labels ("superblock") from a device/partition
  WARNING: MUST do before reusing a device/partition for other purposes
```sh
zpool labelclear ${device}
```

- Query pool configuration (properties)
```sh
zpool get all ${pool}
```

- Change pool configuration (property)
```sh
zpool set <property>=<value> ${pool}
```

- Dump the entire pool (commands) history
```sh
zpool history ${pool}
```

- More...
```sh
man zpool
```

## File systems / Volumes

- Create a new file system
```sh
zfs create ${pool}/${fs_vol}
```

- Create a new volume ("block device")
  Note: look for it in /dev/zvol/${pool}/${fs_vol}
```sh
zfs create -V <size> ${pool}/${fs_vol}
```

- List all file systems / volumes
```sh
zfs list
```

- Mount all file systems
  Note: see 'zfs get mountpoint ${pool}' for mountpoint root path
```sh
zfs mount -a
```

- Create a snapshot
```sh
zfs snapshot ${pool}/${fs_vol}@${snapshot}
```

- Delete a snapshot
```sh
zfs destroy ${pool}/${fs_vol}@${snapshot}
```

- Full backup
  Note: pipe (|) source to destination through netcat, SSH, etc.
  ... on source:
```sh
zfs send -p -R ${pool}/${fs_vol}@${snapshot}
```
- ... on destination:
```sh
zfs receive -F ${pool}/${fs_vol}
```

- Incremental backup
  Note: pipe (|) source to destination through netcat, SSH, etc.
  ... on source:
```sh
zfs send -p -R -i ${pool}/${fs_vol}@${snapshot-previous} ${pool}/${fs_vol}@${snapshot}
```
- ... on destination:
```sh
zfs receive -F ${pool}/${fs_vol}
```

- Query file system / volume configuration (properties)
```sh
zfs get all ${pool}
zfs get all ${pool}/${fs_vol}
```

- Change file system / volume configuration (property)
```sh
zfs set <property>=<value> ${pool}/${fs_vol}
```

- More...
```sh
man zfs
```

