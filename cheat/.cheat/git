git config --global user.name "John Doe"           # To set your identity name
git config --global user.email johndoe@example.com # To set your identity email
git config --global core.editor emacs              # To set your editor
git config --global color.ui true                  # To enable color

git init                                           # Initialize a local Git repository
git clone ssh://git@<repository-server.com>/[username]/[repository-name].git # Clone a repository
git clone --bare ssh://git@<repository-server.com>/[username]/[repository-name].git # Clone a repository in bare, needed for worktrees

git remote add upstream git@github.com:name/repo.git # To sync a fork with the master repo - Set a new remote repo 
git remote -v # Confirm new remote repo
git clone --depth 1 <remote-url> # Perform a shallow clone to only get latest commits (helps save data when cloning large repos)
git pull --unshallow # To unshallow a clone

git remote prune origin              # Remove all stale branches (ones that have been deleted on remote) So if you have a lot of useless branches, delete them on Github and then run this
git remote prune $(git remote | tr '\n' ' ') # The following can be used to prune all remotes at once
git fetch upstream                   # Get branches
git fetch --all                      # To pull changes while overwriting any local commits
git fetch --all --prune              # To pull changes and delete local branches that are not in remote
git branch                           # To list branches
git branch -va                       # List local - remote branches
git branch branch_name               # To create branch "branch_name"
git branch -d branch_name            # To delete the branch "branch_name" 
git branch -D branch_name            # To force delete the branch "branch_name" 
git branch -m master main            # To rename 
git push origin --delete branch_name # git branch delete remote To delete/remove a remote branch
git branch -u upstream/foo           # To make an exisiting branch track a remote branch

git tag # list tag
git tag -n # extensive description
git tag -l <pattern>  # search
git tag -l --sort=refname <pattern> # order
git tag -l --sort=-version:refname <pattern>
git tag --sort=committerdate -l <pattern>
git ls-remote --tags <remote>
git ls-remote --tags origin
git fetch --all --tags # fetch remote tags

git tag <name> # create tag
git tag -a <tag_name> -m "message"
git tag <tag_name> <commit_sha> # Tag a specific commit
git tag -a <tag_name> <commit_sha> -m "message" # create an annotated tag
git tag <tag_name> HEAD    # for the last commit 
git tag <tag_name> HEAD~1  # for the commit before HEAD 
git tag <tag_name> HEAD~1  # for two commits before HEAD 
git tag -d <tag_name> # Detele tag

git push --delete origin <tag_name> # delete remote tag 
git push origin :refs/tags/<tag>    # same using push
git push --tags
git push -f # push changes if I rewritten history

git switch <branch_name>               # New syntax
git checkout master                    # Checkout local master branch (old syntax)
git switch -                           # go back to previous branch
git checkout --orphan branch_name      # Create a bare branch (one that has no commits on it)
git checkout -b new_branch             # Create and checkout a new branch
git checkout -b master upstream/master # Create and checkout a new branch from a different starting point

git restore <filename>                 # get specific file (new syntax)
git checkout -- <file>                 # get specific file (old syntax)
git checkout <branch_name> <file_name> # bring in a specific file from a different branch

git merge upstream/master  # Merge remote into local repo
git merge --squash feat    # git merge and squash all commits from a feature branch together when merging
git commit 

# Interactive rebase for the last 7 commits
  # pick: use this commit
  # rework: use the commit, but edit the commit message
  # edit: use the commit, but stop for amending
  # squash: Combining Multiple Commits Into One 
  # drop: remove commit
git rebase master                # take the commits from master and add to the current branch
git rebase -i @~7                # Interactive rebase for the last 7 commits, see above for options
git rebase --interactive <base>
git rebase --abort

git status # Show the changes from last commit

git add --all           # To stage all changes for commit:
git add [filename]      # To stage a file change for commit:
git rm --cached <file>  # To unstage file (stop tracking a file)
git restore <file>      # To reset file back to how it was - new syntax 
git rn -r [name]        # Remove a file or folder
git checkout -- <file>  # get specific file

git commit -m "Your commit message" # add insitu commit message 
git commit -am "message"            # add changes and commit
git commit --amend # To edit previous commit message, To add more changes to the last commit
git commit --date="`date --date='2 day ago'`" # Git commit in the past, more recent versions of Git also support --date="2 days ago" directly
git commit --date="Jun 13 18:30:25 IST 2015"  # Git commit in the past, more recent versions of Git also support --date="2 days ago" directly
# To change the date of an existing commit, see below
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'

git resert <commit-sha> # to see what I did before, will uncommit and unstage changes but leave those files in the working directory.
git reset --hard # To removed staged and working directory changes, see options next
# options:
    --soft: Uncommit changes but leave those changes staged
    --mixed (the default): Uncommit and unstage changes, but changes are left in the working directory
    --hard: Uncommit, unstage, and delete changes

git reset --hard HEAD~2    # To go 2 commits back
git revert <commit SHA>    # Revert a commit and keep the history of the reverted change as a separate revert commit

git clean -f -d                              # To remove untracked files
git clean -f -d -x                           # To remove untracked and ignored files
git push origin master                       # To push to the tracked master branch(to remote repo):
git push git@github.com:username/project.git # To push to a specified repository:

git submodule add <repo-url>            # add submodule
git submodule update --init --recursive # Update all your submodules

git show :/cool   # Revisions can also be identified with :/text So, this will show the first commit that has "cool" in their message body

git checkout -p HEAD^ -- /path/to/file    # Undo parts of last commit in a specific file
git checkout HEAD -- /path/to/file        # Undo parts of last commit in a specific file
git checkout -- path/to/your/file         # idem Undo parts of last commit in a specific file
git checkout <commit_id> -- /path/to/file # Undo parts of last commit in a specific file

git cherry-pick <commit SHA1> # Pick a commit from a branch to current branch. This is different than merge as this just applies a single commit from a branch to current branch

git stash # To stash changes locally, this will keep the changes in a separate changelist called stash and the working directory is cleaned. You can apply changes from the stash anytime
git stash save "message" # To stash changes with a message
git stash list # To list all the stashed changes
git stash pop # To apply the most recent change and remove the stash from the stash list
git stash apply stash@{6} # To apply any stash from the list of stashes. This does not remove the stash from the stash list

git log --oneline # Show all the commits
git log --graph --decorate --oneline # Show all the commits
git log --pretty=email --patch-with-stat --reverse --full-index -- Admin\*.py > Sripts.patch # Commit history of a set of files
git log @{u}.. # View commits that will be pushed
git log -p feature --not master # View changes that are new on a feature branch
git diff master...feature
git diff un--staged # for staged changes
git diff          # for unstaged changes

git reflog # View undo history
git show 83fb499 # Show what a commit did.
git show 83fb499:path/fo/file.ext # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2 # Check difference between branches

git diff --no-index path/to/file/A path/to/file/B # Diff files WITHOUT considering them a part of git This can be used to diff files that are not in a git repo!
git blame filename # To see who commited which line in a file
git --git-dir=<path>/.git <command> # execute git command in another path - (it can be use with 'at' command
git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k # Import commits from another repo
git log --pretty=format: --name-only --diff-filter=A | sort - | sed '/^$/d' # If you want a list of files that ever existed (i.e. including deleted files):

git ls-tree -r master --name-only # Files
git ls-tree --full-tree --name-only -r HEAD #  To show all of the tracked files that have been committed (on the current branch), use

# Worktrees
git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" # WORKTREE enable remotes
git worktree add <name>

### in config of bare it must seen 
[remote "origin"]
	url = <remote-repo-url>.git
	fetch = +refs/heads/*:refs/remotes/origin/*
  ## then
  git fetch origin
# The “fatal: refusing to merge unrelated histories” Git error:
git pull origin master --allow-unrelated-histories # 
git merge --no-ff --allow-unrelated-histories <source branch with changes> # positioned at br target


# Create a new repository
git clone git@git.<server>:<path>/<repo>.git
cd <repo>
git switch -c main
touch README.md
git add README.md
git commit -m "add README"
git push -u origin main


# Push an existing folder
cd existing_folder
git init --initial-branch=main
git remote add origin git@git.<server>:<path>/<repo>.git
git add .
git commit -m "Initial commit"
git push -u origin main


# Push an existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin git@git.<server>:<path>/<repo>.git
git push -u origin --all ci.skip
git push -u origin --tags ci.skip

# FROM Detached-head to branch
 # git add and commit changes
git branch <new_branch>    # it can be main if not exists
git checkout <new_branch>
 # then merge

# DELETE OLD COMMITS  AND DELETE ALL HISTORY (useful if it is needed to downsize repo and history is not important)
git remote remove <old-remote-name>
# Now we can start our rewrite of the full history. Let's assume that we want to make the current main commit the new root for the repository.
git rev-parse HEAD~5 > .git/shallow   # leave last 5 commits
git fsck --unreachable                # check what will be removed
git gc --prune=now                    # actually delete
git push -u origin main       #  will fail
# push will fail because a shallow cannot be pushed, so it is needed
# To finalize the rewrite by removing the "backup" references in refs/original. Furthermore you can now delete the .git/shallow file.
git rev-parse --verify main >> .git/info/grafts
git filter-branch -- --all
mv .git/shallow ../.          # or delete it
git push -u origin main       # now will not fail


