# To set your identity:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
# To set your editor:
git config --global core.editor emacs
# To enable color:
git config --global color.ui true
# Initialize a local Git repository
git init
# Clone a repository
git clone ssh://git@<repository-server.com>/[username]/[repository-name].git
# To sync a fork with the master repo:
# Set a new repo
git remote add upstream git@github.com:name/repo.git
# Confirm new remote repo
git remote -v
# Perform a shallow clone to only get latest commits
# (helps save data when cloning large repos)
git clone --depth 1 <remote-url>
# To unshallow a clone
git pull --unshallow
# Remove all stale branches (ones that have been deleted on remote)
# So if you have a lot of useless branches, delete them on Github and then run this
git remote prune origin
# The following can be used to prune all remotes at once
git remote prune $(git remote | tr '\n' ' ')
# Get branches
git fetch upstream
# To pull changes while overwriting any local commits
git fetch --all
git reset --hard origin/master
# To list branches
git branch
# List local - remote branches
git branch -va
# To create branch "branch_name"
git branch branch_name
# To delete the branch "branch_name"
git branch -D branch_name
# To rename 
git branch -m master main
# To delete/remove a remote branch
git push origin --delete branch_name # git branch delete remote
# To make an exisiting branch track a remote branch
git branch -u upstream/foo
# list tag
git tag
git tag -n # extensive description
git tag -l <pattern>  # search
git tag -l --sort=refname <pattern> # order
git tag -l --sort=-version:refname <pattern>
git tag --sort=committerdate -l <pattern>
git ls-remote --tags <remote>
git ls-remote --tags origin
git fetch --all --tags # fetch remote tags
# create tag
git tag <name>
git tag -a <tag_name> -m "message"
git tag <tag_name> <commit_sha> # Tag a specific commit
git tag -a <tag_name> <commit_sha> -m "message" # create an annotated tag
git tag <tag_name> HEAD    # for the last commit 
git tag <tag_name> HEAD~1  # for the commit before HEAD 
git tag <tag_name> HEAD~1  # for two commits before HEAD 
# Detele tag
git tag -d <tag_name>
git push --delete origin <tag_name> # delete remote tag 
git push origin :refs/tags/<tag>    # same using push
git push --tags
# Checkout local master branch
git checkout master
# Create a bare branch (one that has no commits on it)
git checkout --orphan branch_name
# Create and checkout a new branch
git checkout -b new_branch
# Create and checkout a new branch from a different starting point
git checkout -b master upstream/master
# Merge remote into local repo
git merge upstream/master
# git merge and squash all commits from a feature branch together when merging
git merge --squash feat
git commit 

# Interactive rebase for the last 7 commits
  # pick: use this commit
  # rework: use the commit, but edit the commit message
  # edit: use the commit, but stop for amending
  # squash: Combining Multiple Commits Into One 
  # drop: remove commit
git rebase -i @~7
git rebase --interactive <base>
# Show the changes from last commit
git status
# To stage all changes for commit:
git add --all
# To stage a file change for commit:
git add [filename]
# To unstage file
git rm --cached <file>
# To commit staged changes
git commit -m "Your commit message"
# To edit previous commit message
git commit --amend
# Git commit in the past
git commit --date="`date --date='2 day ago'`"
git commit --date="Jun 13 18:30:25 IST 2015"
# more recent versions of Git also support --date="2 days ago" directly
# Remove a file or folder
git rn -r [name]
# To change the date of an existing commit
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'
# To removed staged and working directory changes
git reset --hard
# To go 2 commits back
git reset --hard HEAD~2
# To remove untracked files
git clean -f -d
# To remove untracked and ignored files
git clean -f -d -x
# To push to the tracked master branch(to remote repo):
git push origin master
# To push to a specified repository:
git push git@github.com:username/project.git


# add submodule
git submodule add <repo-url>
# Update all your submodules
git submodule update --init --recursive
# Revisions can also be identified with :/text
# So, this will show the first commit that has "cool" in their message body
git show :/cool

# Undo parts of last commit in a specific file
git checkout -p HEAD^ -- /path/to/file
git checkout HEAD -- /path/to/file
git checkout -- path/to/your/file       # idem
git checkout <commit_id> -- /path/to/file

# Revert a commit and keep the history of the reverted change as a separate revert commit
git revert <commit SHA>
# Pich a commit from a branch to current branch. This is different than merge as
# this just applies a single commit from a branch to current branch
git cherry-pick <commit SHA1>
# To stash changes locally, this will keep the changes in a separate changelist
# called stash and the working directory is cleaned. You can apply changes
# from the stash anytime
git stash
# To stash changes with a message
git stash save "message"
# To list all the stashed changes
git stash list
# To apply the most recent change and remove the stash from the stash list
git stash pop
# To apply any stash from the list of stashes. This does not remove the stash
# from the stash list
git stash apply stash@{6}
# Show all the commits
git log --oneline
# Commit history of a set of files
git log --pretty=email --patch-with-stat --reverse --full-index -- Admin\*.py > Sripts.patch
# View commits that will be pushed
git log @{u}..
# View changes that are new on a feature branch
git log -p feature --not master
git diff master...feature
# Show what a commit did.
git show 83fb499
# Shows the file as it appeared at 83fb499.
git show 83fb499:path/fo/file.ext
# Check difference between branches
git diff branch_1 branch_2
# Diff files WITHOUT considering them a part of git
# This can be used to diff files that are not in a git repo!
git diff --no-index path/to/file/A path/to/file/B
# To see who commited which line in a file
git blame filename
# execute git command in another path - (it can be use with 'at' command
git --git-dir=<path>/.git <command>
# Import commits from another repo
git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k
# If you want a list of files that ever existed (i.e. including deleted files):
git log --pretty=format: --name-only --diff-filter=A | sort - | sed '/^$/d'
# Files
git ls-tree -r master --name-only
#  To show all of the tracked files that have been committed (on the current branch), use
git ls-tree --full-tree --name-only -r HEAD

# WORKTREE enable remotes
git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" 
### in config of bare it must seen 
[remote "origin"]
	url = <remote-repo-url>.git
	fetch = +refs/heads/*:refs/remotes/origin/*
  ## then
  git fetch origin
# The “fatal: refusing to merge unrelated histories” Git error:
git pull origin master --allow-unrelated-histories # 
git merge --no-ff --allow-unrelated-histories <source branch with changes> # positioned at br target

