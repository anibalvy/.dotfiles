# To ssh via pem file (which normally needs 0600 permissions):
ssh -i /path/to/file.pem user@example.com

# To connect on an non-standard port:
ssh -p 2222 user@example.com

# To connect and forward the authentication agent
ssh -A user@example.com

# To execute a command on a remote server:
ssh -t user@example.com 'the-remote-command'

# To tunnel an x session over SSH:
ssh -X user@example.com

# Redirect traffic with a tunnel between local host (port 8080) and a remote
# host (remote.example.com:5000) through a proxy (personal.server.com):
ssh -f -L 8080:remote.example.com:5000 user@personal.server.com -N

# reverse-ssh-tunnel
#   On the machine that is needed to login is needed to run:
ssh -fN -R 7000:localhost:22 username@yourMachine-ipaddress
#   So this ssh connection request originating from remote server to your machine will make sure that any ssh connection request for port 7000 on your machine is forwarded to port 22 of remote server.
#   Now do an ssh connection request from your machine to your own machine at port 7000:
ssh username@localhost -p 7000

# forward port (to make target machine port on the local)
ssh user@target_machine -L  <port>:<ip_address>:<port>

# This command creates an SSH connection to your workdesktop.com computer, but at the same time opens port 80 on your local machine. If you point your web browser at http://localhost, the connection will actually be forwarded through your SSH connection to your desktop, and sent onto the workserver.com server, port 80.
ssh -L80:workserver.com:80 user@workdesktop.com


# To launch a specific x application over SSH:
ssh -X -t user@example.com 'chromium-browser'

# To create a SOCKS proxy on localhost and port 9999
ssh -qND 9999 user@example.com

# To tunnel an ssh session over the SOCKS proxy on localhost and port 9999
ssh -o "ProxyCommand nc -x 127.0.0.1:9999 -X 4 %h %p" username@example2.com

# -X use an xsession, -C compress data, "-c blowfish" use the encryption blowfish
ssh user@example.com -C -c blowfish -X

# For more information, see:
# http://unix.stackexchange.com/q/12755/44856

# Copy files and folders through ssh from remote host to pwd with tar.gz compression
# when there is no rsync command available
ssh user@example.com "cd /var/www/Shared/; tar zcf - asset1 asset2" | tar zxf -

# Mount folder/filesystem through SSH
# Install SSHFS from https://github.com/libfuse/sshfs
# Will allow you to mount a folder securely over a network.
sshfs name@server:/path/to/folder /path/to/mount/point

# Emacs can read file through SSH
# Doc: http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html
emacs /ssh:name@server:/path/to/file
vim /ssh:name@server:/path/to/file

# config password less conection
# copy public key (commonly id_rsa.pub) to remote server and add to .ssh/authorized keys
scp ~/.ssh/<key>.pub <remote>:/user/.ssh/id_rsa_pub
cat ~/.ssh/<key>.pub > ~/.ssh/authorized_keys  # create if not present
# check permission
chmod og-wx ~/.ssh/authorized_keys

# connect using privete key
ssh -i <key> <remote>
ssh -i <key> <user>:<remote>

# allow short connection to <remote_server>
vim ~/.ssh/config
# add entry like
Host remote_server
    Hostname <remote_server_ip_o_url>
    User <username>
    Port 22
    IdentityFile ~/.ssh/<private_key>

# then connect using Host
ssh remote_server


