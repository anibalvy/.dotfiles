
# make backup
ETCDCTL_API=3 etcdctl snapshot save /etc/etcd-snapshot.db

ETCDCTL_API=3 etcdctl snapshot save /etc/etcd-snapshot.db \
        --cacert /etc/kubernetes/pki/etcd/ca.crt \
        --cert /etc/kubernetes/pki/etcd/server.crt \
        --key /etc/kubernetes/pki/etcd/server.key

# check backup status
➜ root@cluster2-master1:~# ETCDCTL_API=3 etcdctl snapshot status /etc/etcd-snapshot.db

# get registry
export ETCDCTL_API=3
export ETCDCTL_CACERT=/etc/kubernetes/pki/etcd/ca.crt
export ETCDCTL_CERT=/etc/kubernetes/pki/etcd/healthcheck-client.crt
export ETCDCTL_KEY=/etc/kubernetes/pki/etcd/healthcheck-client.key
etcdctl get /registry/services/specs/default/kubernetes

# Cluster infos
etcdctl get /_etc/machines/<token>        # Details of a host
etcdctl get /_etc/config
etcdctl --write-out=table --endpoints=$ENDPOINTS endpoint status # check status
etcdctl --endpoints=$ENDPOINTS endpoint health

# Accessing the key space
etcdctl get / --prefix --keys-only          # Get top-level keys
etcdctl get / --prefix                      # Get top-level keys and values
etcdctl get / --prefix --keys-only --recursive  # Get full tree

etcdctl get <key path>                      # Get key details
etcdctl get <key path> --print-value-only   # Get key value only
etcdctl get <key path> --rev=<number>       # Get older revision of a key
etcdctl -o extended get <key path>          # Get key and metadata
etcdctl get <key path> -w=json              # Output in JSON with metadata
etcdctl get foo --hex                       # Output in hex 

# Batch queries
etcdctl get key1 key10                      # Get all keys key1, key2, key3, ..., key10
etcdctl get --prefix key                    # Get all keys matching ^key
etcdctl get --prefix key --limit=10         # Get max 10 keys matching ^key

# Creating a path
etcdctl mkdir /newpath
etcdctl rmdir /newpath     # Removes only empty paths

# Manipulate keys
etcdctl mk     /path/newkey some-data       # Create key
etcdctl set    /path/newkey some-data       # Create or update key
etcdctl update /path/key new-data           # Update key
etcdctl put    /path/key new-data
etcdctl rm     /path/key
etcdctl rm     /path --recursive

# Make data and paths expire by passing –ttl when creating paths
etcdctl mkdir     /path --ttl 120     # Path with expiration
etcdctl updatedir /path --ttl 120     # Reset path expiration

# Monitor keys
etcdctl watch foo

# Monitoring paths
etcdctl watch /path
etcdctl watch / --prefix              # Recursive watch

# Trigger command on event
etcdctl watch /path --prefix -- printf "Path /path was changed.\n"

# Watch progress 
etcdctl watch -i

# Leases
etcdctl lease grant 60 # grant a lease with 60 second TTL
lease 32695410dcc0ca06 granted with TTL(60s)

etcdctl put --lease=32695410dcc0ca06 foo bar # attach key foo to lease 32695410dcc0ca06
OK

etcdctl lease grant 60
lease 32695410dcc0ca06 granted with TTL(60s)

etcdctl put --lease=32695410dcc0ca06 foo bar
OK

etcdctl lease revoke 32695410dcc0ca06
lease 32695410dcc0ca06 revoked

etcdctl lease timetolive 694d5765fc71500b # get information
lease 694d5765fc71500b granted with TTL(500s), remaining(258s)


etcdctl get foo # empty response since foo is deleted due to lease revocation

etcdctl lease keep-alive 32695410dcc0ca06 # keep-alive


#Compacting revisions
etcdctl compact <number>     # Drop all revisions older than <number>

