pipenv install package                            # install package
pipenv run python script.py                       # run a command with the indicated version in pipenv
pipenv install -r app/requirements.txt            # install from requirements file

pipenv lock --requirements > requirements.txt     # create requirements.txt old version
pipenv requirements > requirements.txt            # create requirements.txt default dependencies
pipenv requirements --dev > dev-requirements.txt  # create requirements.txt to freeze dev dependencies as well use the --dev option

pip show <package>                                # show a package version

pipenv check                                      # check 

pipenv --python 3.8                               # change python version 

pipenv install <package> --dev                    # install development [dev-packages]

pipenv uninstall <package>                        # uninstall 

pipenv --venv                                     # get path of virtual environment

echo 'SECRET_KEY="supersecret"' > .env            # load environment variables, create a .env file
os.environ['TOKEN']                               # using in app

pipenv --rm                                       # delete virtual env

# troubleshooting
# ERROR:: --system is intended to be used for pre-existing Pipfile installation, not installation of specific packages. Aborting.
pipenv --rm

