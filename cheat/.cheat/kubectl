# Kubernetes, kubectl 
#Create a Deployment, expose Service, delete them
#**** from here after, minikube command is optional according kubectl current-context *****

#create a Kubernetes Deployment using an existing image named echoserver
#which is a simple HTTP server and expose it on port 8080 using --port.
kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10
kubectl create deployment hello-minikube --replicas=5 --image=k8s.gcr.io/echoserver:1.10

# ussing apply
kubectl apply -f <manifest>
kubectl apply -k <folder> # for kustomize

# using run, like docker
kubectl run --rm -it --image=alpine -- sh

#expose service
kubectl expose deployment hello-minikube --type=NodePort --port=8080
kubectl expose deployment hello-minikube --type=ClusterIP --port=80

kubectl -n <namespace> expose pod <pod_name> --name <service name> --port 3000 --target-port 80

# replace image of a deployment and change it
kubectl set image deployment my_nginx nginx=ngins:1.20.1 --record
# check
kubectl rollout status deployment/my_nginx
# check history of rollouts
kubectl rollout history deployment/my_nginx
# rollback to specific revision
kubectl rollout undo deployment/my_nginx --to-revision=<revision_number>

#Get the URL of the exposed Service to view the Service details:
minikube service hello-minikube --url
this result can be accesed outside k8s cluster.
 
#get pods
kubectl get pods
kubectl get pods -w # watch
kubectl get pods --sort-by=metadata.name
kubectl get pods --sort-by=metadata.creationTimestamp

# enter pod 
kubectl exec -it <pod name> -- <command>
kubectl exec -it nginx -- sh

# execute command in pod 
kubectl exec <pod_name> -- cat /etc/password

#Get components of a namespace
kubectl get all -n <namespace>

# Get ingress info
kubectl get ing
kubectl describe ing ingress

# EXPOSE APPs
# proxy: enable resources availables locally, only Layer7
kubectl proxy --port=8080
# this will allow
# http://localhost:8080/api/v1/pods  # k8s api to see pods
# http://localhost:8080/api/v1/namespaces/default/services   # see services on namespace default
# http://localhost:8080/api/v1/namespaces/<namespace>/services/<protocol>:<srv_name>:<srv_port>/proxy/   # request service
# http://localhost:8080/api/v1/namespaces/default/services/http:ngix:web/proxy/   # request service

# kubectl port-forward
# Layer4, only tcp
kubectl port-forward -n <namespace> svc/mongo 2701   # expose the same port of the pod in the local machine
kubectl port-forward -n <namespace> svc/mongo :2701   # expose on any available port on localhost
kubectl port-forward -n <namespace> <pod_id> <local_port>:<pod_port>
kubectl port-forward -n <namespace> <pod_id> <local_port_1>:<pod_port_1>  <local_port_2>:<pod_port_1> # expose multiple ports
kubectl port-forward -n <namespace> pods/<pod_id> <local_port>:<pod_port>
kubectl port-forward -n <namespace> deployment/<deployment_name> <local_port>:<pod_port>

# kubefwd: will expose all services in a namespace on localhost
# github.com/txn2/kubefwd
sudo kubefwd services -n <namespace>  # will use /etc/hosts

# NodePort service: exposes the service on each Node IP addresses using static port; will allocate ports from 30000-32767 (change it with --service-node-port-range=20000-22767)
# every node will have the same port mapped, ex: 30010:80 in all nodes
# the nodes will redirect the request to the node that have the service ( this is done automatically by EKS when implement nlb and alb )

#delete service
kubectl delete services hello-minikube

#delete deployment
kubectl delete deployment hello-minikube

# see resource info
kubectl describe <type> <resource>
kubectl describe <type> <resource> > resource.yml # save the resource info
kubectl describe pods
kubectl describe node

# see logs
kubectl logs <resource>
kubectl logs <resource> -f # like tail -f

#info
kubectl cluster-info
kubectl cluster-info dump

#check config (cluster, context...)
kubectl config view --minify
kubectl config current-context

#If we need to set minikube context, we can do as the following:
kubectl config use-context minikube

#conecting with a config file
kubectl --kubeconfig=<kubeconfig>.yml <cmd>
kubectl --kubeconfig=kubeconfig.yml get nodes

# Validate manifest
kubectl create --dry-run=client --validate -f <manifest> # also with apply

# scale deployment
kubectl scale deploy/<name> --replicas 5

# list resources
kubectl api-resources

# show info of resources
kubectl explain <res_name>
kubectl explain <res_name.option>
kubectl explain pod.spec

# create manifest from deployment
kubectl create deploy --image=nginx --dry-run=client -o yaml > my_deployment.yaml
kubectl create deploy --image=nginx --restart=Never --limits='cpu=300m,memory=512Mi' --dry-run=client -o yaml > my_deployment.yaml

# secrets
k auth can-i --list
k auth can-i list secrets --as gianna
yes

k auth can-i get secrets --as gianna
no

k auth can-i "*" "*" # check admin

# decrypt secret one-line
kubectl get secret argocd-initial-admin-secret -n argocd -o yaml | yq e '.data.password' - | base64 -d

# Use nginx:alpine and curl to check if one Pod is accessible on port 80:
k run tmp --restart=Never --rm -i --image=nginx:alpine -- curl -m 5 10.12.2.15 # this use a temporary pod
# Use busybox and wget to check if one Pod is accessible on port 80:
k run tmp --restart=Never --rm --image=busybox -i -- wget -O- 10.12.2.15




