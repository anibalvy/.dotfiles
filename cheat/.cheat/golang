
# Statically Typed Language
var myVariable string        # Statically Typed Language
var myVariable = "myString"  # Statically Typed Language, intialized, type is inferred

# strongly Typed Language
a = 1
b = "two"
c = a + b # is not allowed

# GO is Compiled
# Fast Compile Time
# Built in Concurrency
# Simplicity

# init project
mkdir my_project
cd my_project
go mod init my_project
go mod init github.com/username/my_project
# this will create go.mod file with module name and go version; later it will have the packages

# create main.go or inside of the folder, containing
package main  // main, is special, this will tell the compiler to look for main function
import "fmt"

func main(){
    fmt.Println("hell world")
}

# compile
go build main.go

# this create file main that can be run with
./main

# compile and run
go run main.go

# adding
package main
import "fmt"
import (
        "unicode/utf8"
	"errors"
	"strings"
	"math/rand"
	"time"
	"sync"  // for await for go routine
)

// variables Scope
// - local:
//         - Declared within function
//         - Declared within block: like for, if-else
// - Package: Declared outside all functions and can be used everywhere in the same package
var insidePackage = "package scope"
// - Global:  Declared outside all functions with uppercase first letter and can be used everywhere across package
var GlobalVariable = "global Scope"

// Functions in package can be exported by declaring with uppercase first letter, ex: func ValidateUser() {}

// main function will automatically be entry point
func main(){
    var intNum int  // integer declaration, it can be int, int8, int16, int32, int64
                    // int16 max number 32767
		    // int8: (-128, 127)
		    // int -> 32 or 64 based on arch
		    // uint can be uint, uint8, uint16, uint32, uint64
		    // uint8: (0, 255)
		    // if not initialize, default value is 0 

    var floatNum float32
    var floatNum float64
    var floatNum float // error, doesn't exists
		    // if not initialize, default value is 0 
    // ordinary comments
    // Comments that appear just above top-level (non-indented) declarations like package, func, const, var, and type are called doc comments
    /*
       C-style comment
    */

    // fmt.Print formating see: https://pkg.go.dev/fmt

    // Console input
    var userName string
    fmt.Println("Enter your username: ")
    fmt.Scan(&userName) // will assign input to var userName

    var result float32 = floatNum32 + intNum32 // error, not allowed
    var result float32 = floatNum32 + float32(intNum32) // casting one of the numbers is allowed. 

    var intNum1 = 3
    var intNum3 = 2
    fmt.Println(intNum1/intNum2) = 1  // in division, result is rounded down
    fmt.Println(intNum1%intNum2) = 1  // modulus

    var myString string = "Hello World" // define string
    var myString = "Hello World" // define string
    myString := "Hello World"    // define string
    myString1, myString2 := "Hello", "World"     // define multiple string
    var myString string = "Hello \nWorld" // will print with a new line
		    // if not initialize, default value is ''
    var myString string = `Hello 
    World`                               // will print with a new line
    var myString string = "Hello" + " " + "World" // Concatenate
    fmt.Println(len("test"))  // this lenght is in bytes in utf-8, so, is 4
    fmt.Println(len("A"))  // this lenght is in bytes, so is 1
    fmt.Println(len("£"))  // this lenght is in bytes, so is 2
    fmt.Println(len(utf8.RuneCodeInString("£")))  // this will allow to count characters, in this case is 1, needed import unicode/utf8

    var myRune rune = 'a'
    fmt.Println(myRune) // this will give 97
		        // if not initialize, default value is 0 

    var myBool bool = true // or false
		           // if not initialize, default value is false
    fmt.Printf("value of var mybool= %t", mybool)  

    const myConst string = "constant value" // define constant, must be initialized.
    myConst = "another value" // error, not allowed

    // logical and an or
    if 1==1 && 2==2 {  // AND 
        fmt.Println("is both true")
    } 

    if 1==1 || 2!=2 {  // OR
        fmt.Println("one is true")
    } 

    // call functions
    var numerator int = 11
    var denominator int = 2
    var result, remainder, err = intDivision(numerator, denominator)
    if err != nil {
        fmt.Printf(err.Error())
    } else if remainder == 0 { 
	fmt.Printf("Division result is %v ", result)
    } else {
	fmt.Printf("Division result is %v with remainder %v", result, remainder)
    }

    // switch statement
    switch {
	case err != nil:
		fmt.Printf(err.Error())
        case remainder == 0 :
		fmt.Printf("Division result is %v ", result)
	default:
		fmt.Printf("Division result is %v with remainder %v", result, remainder)
    }

    // conditional switch statement
    switch remainder{
	case 0:
            fmt.Printf("Division was exact")
        case 1,3:
		fmt.Printf("Division was close")
	default:
		fmt.Printf("Division was not close")
    }

    // Arrays: fix length, Same Type, Indexable, Contiguous
    var intArr [3]int32      // default value from int32 which is 0
    var intArr [3]int32 = [3]int32{1,2,3}     // define and assign array 
    intArr := [3]int32{1,2,3}     // define and assign array 
    intArr := [...]int32{1,2,3}     // define and assign array, size is inferred by the copiler

    intArr[1] = 123          // assign value
    fmt.Println(intArr[0])   // first value
    fmt.Println(intArr[1:3]) // second to forth value

    fmt.Println(&intArr[0])   // print out memory location of first element, stored un contiguous mem location

    // array Slices: they are wrap array with added functionality
    var intSlice []int32 = []int32{4,5,6}
    intSlice = append(intSlice, 7)    // [4, 5, 6, 7, *, *] the length is 4 but the capacity is 6
    fmt.Printf("The length is %v with capacity %v", len(intSlice, cap(intSlice)) // to check lenght an capacity
    var intSlice2 = []int32{8,9}
    intSlice = append(intSlice, intSlice2...) // [4 5 6 7 8 9] add multiple values

    var intSlice3 []int32 = make(int32[], 3)    // anothe way, but just defining the length
    var intSlice3 []int32 = make(int32[], 3, 8) // defining the capacity

    // loop Arrays
    for i, v := reange intArr{
        fmt.Println("Index: %v, Value: %v", i, v)
    }
    
    // MAP: {"key": "value"}
    var myMap map[string]uint8 = make(map[string]uint8)
    var myMap2 = map[string]uint8{ "Adam": 23, "Sarah": 45} // define and initilize
    fmt.Println(myMap2["Adam"])   // 23
    fmt.Println(myMap2["Jason"])  // 0 -> as the key doesn't exists, gives the default value from uint8 
    var age, ok = myMap2["Adam"}  // return 23, true
    var age, ok = myMap2["Jason"} // return 0, false -> help to check if the value exists
    if ok{
        fmt.Printf("the age is %v", age)
    } else {
        fmt.Println("Invalid Name")
    }

    delete(myMap2, "Adam")  // delete key from Map, will delete from reference so no return value is given

    // loop Map <<NOTE: will not preseve order of the key>>
    for name:= range myMap2{
        fmt.Printf("Name: %v\n", name)
    }
    for name, age:= range myMap2{
        fmt.Printf("Name: %v, age: %v\n", name, age)
    }

    // to make a "while" loop
    var i int = 0
    for {
        if i >= 10{
	   break
	}
	fmt.Println(i)
	i = i + 1
    }

    // also with:
    for i:=0; i<10; i++ {  // i:=0 is call "initialization", i<10 is "condition" and i++ is the "post" (options: i--, i+=10, i-=10, i*=10, i/=10)
        fmt.Println(i)
    }

    // String, bytes related to Runes
    var myString = "résumé"
    var indexed = myString[0]
    fmt.Printf("%v, %T", indexed, indexed) // give 114, uint8  print type of the var
    var indexed = myString[3]
    fmt.Printf("%v, %T", indexed, indexed) // give 115, uint8 -> but is showning the value of the byte instead of the char 
    for i, v := range myString{
        fmt.Println(i, v)
    }
	    // 0 114
	    // 1 233 
	    // 3 115
	    // 4 117
	    // 5 109
	    // 6 233

    // // using rune
    var myString = []rune("résumé") // casting to array of runes which are an alias of int32
    var indexed = myString[0]
    for i, v := range myString{
        fmt.Println(i, v)
    }
	    // 0 114
	    // 1 233 
	    // 2 115
	    // 3 117
	    // 4 109
	    // 5 233

    var myRune = 'a'   // another method of define runes

    // Strings are inmutables
    // best use "strings" import, that will create an array and finally create the string (much faster)
    var strSlice = []string{"a","d", "d"}
    var strBuilder strings.Builder
    for i:= range strSlice{
        strBuilder.WriteString(strSlice[i])
    }
    var catStr = strBuilder.String()

    // Structs
    var myEngine gasEngine
    fmt.Println(myEngine.mpg, myEngine.gallons) // will print  0, 0

    var myEngine gasEngine = gasEngine{25, 15}
    myEngine.mpg = 20
    fmt.Println(myEngine.mpg, myEngine.gallons) // will print  20,15

    var myEngine gasEngine = gasEngine{25, 15, owner{"Alex"}, 10}
    myEngine.mpg = 20
    fmt.Println(myEngine.mpg, myEngine.gallons, myEngine,ownerInfo.name, myEngine.int) // will print  20,15, "Alex", 10

    // anonymous struct: need to define and initilize in the same location
    type myEngine2 = struct{
        mpg uint8
	gallons uint8
    }{ 30, 40}

    // structs methods
    fmt.Printf("Total miles left in tank: %v", myEngine.milesLeft())

    // structs and interfaces
    var myEngine1 gasEngine = gasEngine{25,15}
    canMakeIt(myEngine1, 50)

    var myEngine2 electricEngine = electricEngine{25,15}
    canMakeIt(myEngine2, 50)

    // Pointers: special type that holds memory location
    var p *int32   // variable p will hold the memory address of an int32 value, so it will be 8 bytes for a 64bit arch, not initilized with value nil
    var p *int32 = new(int32) // initialized that will gives us a free memory location and will assign the default type of the pointer value to this case a default 0
    var p *int32 = &int32 // same as new(int32)
    var i int32
    fmt.Printf("The value p points to is: %v", *p) // get value by dereferencing the pointer (*p), in this case 0
    *p = 10    // change the value stored at the memory location 
    fmt.Printf("The value p points to is: %v", *p) // get value by dereferencing the pointer (*p), now is 10

    var p2 *int32 = new(int32)
    p = &i   // now we want the memory address of the variable i, not its value, so both i and *p get the value 
    *p = 1
    fmt.Printf("The value i is: %v", i) // prints 1

    // on the opposite
    var k int32 = 2
    i = k // will copy the value k to the i memory location
    fmt.Printf("The value i is: %v", i) // prints 2

    // the exception is when working with Slices
    var slice = []int32{1,2,3}
    var sliceCopy = slice
    sliceCopy[2] = 4
    fmt.Println(slice)     // [1 2 4]  -> the original value is change, so slices we're just copying pointers
    fmt.Println(sliceCopy) // [1 2 4]  -> both variables refer to the same data


    // pointers and functions
    var thing1 = [5]float64{1,2,3,4,5}
    fmt.Printf("\n memory location of thing1 array is: %v", &thing1)  // different from thing2 with no pointer
    var result [5]float64 = square(thing1)
    fmt.Printf("\n result is: %v", result)


    // GO Routines: launch multiple functions and execute them concurrently // not parallellism
    var dbData = []string{"id1","id2","id3","id4","id5"}
    t0 := time.Now()
    for i:=0; i<len(dbData); i++{
        dbCall(i)  // sequentially
	wg.Add(1)
        go dbCall(i)  // using go routine
    }
    wg.Wait() // to wait for the go routing to be Done
    fmt.Printf("Total execution time is: %v", time.Since(t0))

    // Channels: allow to pass information between go routines
       // they hold data, thread safe and can listen for Data
    var c = make(chan int) // make channel with the value we want the channel to hold
    c <- 1 // add value 1 to the channel
    var i = <- c // assing channel value to a variable and the value is pop out of the channel
       // calling a function
    var c = make(chan int)
    go process(c)         // the process function stays active until the main function is done with the channel (not with buffer channel)
    for i:= range c{
        fmt.Println(i)
    }

    // Buffer channel: similar be we can store multiples values in the channel at the same time
    var c = make(chan int, 5) // we can store at 5 values without having to wait for the main function to make room in the channel by popping out the value



    
}
// NOTE: all the following probably must be before main function

// Go Routines, using Mutex RWMutex
var m = sync.Mutex{} // MUTual EXclusion, to save data and avoid memory corruption when they are writing at the same time
var m = sync.RWMutex{} // another type of mutexRW MUTual EXclusion, to save data and avoid memory corruption when they are writing at the same time
                       // this will provides another method call m.Rlock() and m.Runlock()
var wg = sync.WaitGroup{}
func dbCall(i int) {
    //simulate
    var delay float32 = rand.Float32()*2000
    // if added m.Lock() here, it will kill concurrency by using only Mutex; not if using RWMutex, because Mutex will lock other routines to access results slice
    time.Sleep(time.Duration(delay)*time.Millisecond)
    fmt.Println("The result from the database is: ", dbData[i])
    m.Lock()    // mutex lock memory to save data, it is lock it will wait
    results = append(results, dbData[i])
    m.Unlock()  // mutex release
    log()
    wg.Done()
}

func log(){
    m.Rlock()
    fmt.Printf("The current result is: %v", results)
    m.Runlock()
}

// Channels
func process( c chan int){
    defer close(c)  // defer means do this before function exists
    for i:=0; i<5; i++{
        c <- 1
    }
    // if not defer is used, close(c) must be here
}

// pointers and functions
func square(thing2 [5]float64) [5]float64{    // no pointer will create another array for thing2
func square(thing2 *[5]float64) [5]float64{   // with pointer will change thing1 avoiding copy memory, meaning faster
    fmt.Printf("\n memory location of thing2 array is: %v", &thing2) // different from thing1 with no pointer
    for i := range thing2{
        thing2[i] = thing2[i]*thing2[i]
    }
}


// Structs
type gasEngine struct{
    mpg unit8
    gallons uint8
    ownerIngo owner
    int                // field name int, also type int
}

type owner struct{
    name string
}


type electricEngine struct{
    mpkwh unit8
    kwh uint8
}

// struct method
func (e gasEngine) milesleft() uint8 {   // (e gasEngine) we are assign this function to gas engine type
    return e.gallons*e.mpg
}

func (e electricEngine) milesleft() uint8 {  
    return e.mpkwh*e.kwh
}

func canMakeIt(e gasEngine, miles uint8){
    if mile <= e.milesLeft(){
        fmt.Println("You can make it")
    } else {
        fmt.Println("Need fuel to make it")
    }
}

// for use mileleft with both gasEngine and electricEngine we need INTERFACES
type engine interface{
    milesLeft() uint8
}

// so instead e gasEngine, we replace it with Engine
func canMakeIt(e engine, miles uint8){
    if mile <= e.milesLeft(){
        fmt.Println("You can make it")
    } else {
        fmt.Println("Need fuel to make it")
    }
}


func intDivision(numerator int, denominator int) (int, int, error) {
    var err error     // default value or error is nil
    if denominator == 0 {
        err = errors.New("Cannot Divide by Zero")
	return 0, 0, err
    }
    var result int = numerator/denominator
    var reminder int = numerator%denominator
    return result, remainder, err
}

