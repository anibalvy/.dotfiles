## Anchors
^          # Start of the string or start of the line in multiple lines
$          # End of the string or End of the line in multiple lines
\A         # Start of a string
\Z         # End of a string
\b         # Word boundary
\B         # not Word boundary
\<         # Start of Word
\>         # End of Word

## Quantifiers
*          # 0 or more
+          # 1 or more
?          # 0 or 1
{3}        # Exactly 3
{3,}       # 3 or more
{3,4,5}    # 3,4 or 5

## String Replacement
$n         # nth non-pa-ssive group
$2         # "-xyz-" in /^(abc-(xy-z))$/
$1         # "-xyz-" in /^(?:a-bc)-(xyz)$/
$`         # Before matched string
$'         # After matched string
$+         # Last matched string
$&         # Entire matched string

## Character Classes
\c         # Control character
\s         # white space
\S         # Not white space
\d         # Digit
\D         # Not Digit
\w         # Word
\W         # Not Word
\x         # Hex digit
\O         # Octal digit

## Character  Spacial
\n         # new line
\r         # Carriage return
\t         # Tab
\V         # Vertical tab
\f         # form feed
\xxx       # Octal character xxx
\xhh       # Hex character hh

## Groups and Ranges
.          # any charactere except new line (\n)
(a|b)      # a or b
(...)      # Group
(?:...)    # Passive (non-c-apt-uring) group
[abc]      # Range (a or b or c)
[^abc]     # Not a or b or c
[!abc]     # matches one character that is not given in the bracket. Ex. [!C] matches Bat, bat, or cat but not Cat (in vim check case insensity search is set will not work)
[a-q]      # Letter from a to q
[A-Q]      # Upper case letter from A to Q
[0-7]      # Digits from 0 to 7
\n         # nth group/-sub-pattern

## Modifiers
g          # Global match
i          # Case-insensitive match
m          # multiple lines
s          # Treat string as single line
X          # Allow comments and white space in pattern
e          # Evaluate replacement
U          # Ungreedy pattern

## Assertions
?=         # Lookaheadd assertion
?!         # Negative lookahead
?<=        # Lookbehind assertion
?!= or ?<! # Negative lookbehind
?>         # Once-only Subexpression
?()        # Condition [if then]
?()|       # Condition [if then else]
?#         # Comment

## Examples Metacharacter
^abc      # abc, abcdefg, abc123
abc$      # abc, endinabc, 123abc
a.c       # abc, aac, acc, adc,...
bill|ted  # ted, bill
ab{2}c    # abbc
a[bB]c    # abc, aBc
(abc){2}  # abcabc
ab*c      # ac, abc, abbc, abbbbc, abbbbbbc
ab+c      # abc, abbc, abbbbc, abbbbbbc
ab?c      # ac, abc
a\sb\sc   # a b c

## Examples Samples
([A-Za-z0-9-]+)                         # Letters, number, hyphens (minuese)
(\d{1,2}\/\d{1,2}\/\d{4})               # date e.g. 23/2/1999
([^\s]+(?=\.(jpg|png|gif))\.\2)         # jpg, png or gif image
(^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^50$)    # Any number from 1 to 50 inclusive
(#?([A-Fa-f0-9]){3}(([A-Fa-f0-9]){3})?) # Hex Color
((?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,15}) # 8 or 15 character string with at least 1 upper case, 1 lower case and 1 digit
(\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,6})        # email
(\<(/?[^\>]+)\>)                        # HTML tag
/.*".*".*".*                            # lines with 3 double quotes
